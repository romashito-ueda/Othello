openapi: 3.0.0
info:
  title: Othello Game API
  version: 1.0.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
    Game:
      type: object
      properties:
        game_id:
          type: integer
        player1_id:
          type: integer
        player2_id:
          type: integer
        status:
          type: string
        winner_id:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
    Move:
      type: object
      properties:
        move_id:
          type: integer
        game_id:
          type: integer
        player_id:
          type: integer
        position_x:
          type: integer
        position_y:
          type: integer
        timestamp:
          type: string
          format: date-time
security:
  - bearerAuth: []

paths:
  /users:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
              required:
                - username
                - password
                - email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                user_id: 1
                username: "john_doe"
                email: "john@example.com"
                created_at: "2024-11-08T12:34:56Z"
        '400':
          description: Invalid input
          content:
            application/json:
              example:
                error: "Invalid input data"

  /auth/token:
    post:
      summary: Authenticate user and issue a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Token issued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: "Invalid username or password"

  /users/{user_id}:
    get:
      summary: Get user information
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                user_id: 1
                username: "john_doe"
                email: "john@example.com"
                created_at: "2024-11-08T12:34:56Z"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found"

    patch:
      summary: Update user information
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                display_name:
                  type: string
              required:
                - email
      responses:
        '200':
          description: User information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                user_id: 1
                username: "john_doe"
                email: "updated@example.com"
                created_at: "2024-11-08T12:34:56Z"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found"

    delete:
      summary: Delete a user account
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found"

  /games:
    post:
      summary: Create a new game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                player1_id:
                  type: integer
                player2_id:
                  type: integer
              required:
                - player1_id
                - player2_id
      responses:
        '201':
          description: Game created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
              example:
                game_id: 123
                player1_id: 1
                player2_id: 2
                status: "ongoing"
                winner_id: null
                created_at: "2024-11-08T12:34:56Z"
        '400':
          description: Invalid input
          content:
            application/json:
              example:
                error: "Invalid input data"

  /games/{game_id}:
    get:
      summary: Get game state
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Game state retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
              example:
                game_id: 123
                player1_id: 1
                player2_id: 2
                status: "ongoing"
                winner_id: null
                created_at: "2024-11-08T12:34:56Z"
        '404':
          description: Game not found
          content:
            application/json:
              example:
                error: "Game not found"

    patch:
      summary: Update game state
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                winner_id:
                  type: integer
                  nullable: true
              required:
                - status
      responses:
        '200':
          description: Game state updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
              example:
                game_id: 123
                player1_id: 1
                player2_id: 2
                status: "finished"
                winner_id: 1
                created_at: "2024-11-08T12:34:56Z"
        '400':
          description: Invalid input
          content:
            application/json:
              example:
                error: "Invalid status"
        '404':
          description: Game not found
          content:
            application/json:
              example:
                error: "Game not found"

    delete:
      summary: Delete a game
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Game deleted successfully
        '404':
          description: Game not found
          content:
            application/json:
              example:
                error: "Game not found"
